<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:oxm="http://www.springframework.org/schema/oxm"
	xmlns:sws="http://www.springframework.org/schema/web-services"
	xsi:schemaLocation="http://www.springframework.org/schema/web-services http://www.springframework.org/schema/web-services/web-services-1.5.xsd
		http://www.springframework.org/schema/oxm http://www.springframework.org/schema/oxm/spring-oxm-3.0.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd">


	<!--
		~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ 
		Spring-ws
		~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	-->

	<bean id="messageFactory" class="org.springframework.ws.soap.saaj.SaajSoapMessageFactory"/>

    <bean id="messageReceiver" class="org.springframework.ws.soap.server.SoapMessageDispatcher"/>

    <bean id="schemaCollection" class="org.springframework.xml.xsd.commons.CommonsXsdSchemaCollection">
        <description>
            This bean merges messages.xsd along with all its imported and included schemas (e.g., types.xsd) 
            into a single schema. The resulting merged schema makes it easier to define a WSDL specification.
        </description>
        <property name="xsds">
        	<list>
        		<value>/ws/atlasmessages.xsd</value>
        	</list>
        </property>
        <property name="inline" value="true"/>
    </bean>
 
    <oxm:jaxb2-marshaller id="marshaller" contextPath="edu.isi.bmkeg.neuart.atlasserver.ws.schema"/>

	<!--
		~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ 
		The endpoint mappings map from 
		a request to an endpoint.
		~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	-->
    <bean id="annotationMapping"
          class="org.springframework.ws.server.endpoint.mapping.PayloadRootAnnotationMethodEndpointMapping">
        <description>
            Detects @PayloadRoot annotations on @Endpoint bean methods. 
			It uses two interceptors: one that logs the message payload, and the other validates
            it accoring to the 'xsd' schema file.
        </description>
        <property name="interceptors">
            <list>
                <bean class="org.springframework.ws.server.endpoint.interceptor.PayloadLoggingInterceptor"/>
                <bean class="org.springframework.ws.soap.server.endpoint.interceptor.PayloadValidatingInterceptor">
                    <property name="xsdSchemaCollection" ref="schemaCollection"/>
                    <property name="validateRequest" value="true"/>
                    <property name="validateResponse" value="true"/>
                </bean>
            </list>
        </property>
        <property name="order" value="1"/>
    </bean>

    <sws:marshalling-endpoints/>


	<!--
		~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ 
 		ENDPOINT EXCEPTION RESOLVER 
		~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	-->

    <!--
        Endpoint exception resolvers can handle exceptions as they occur in the Web service. We have two sorts of
        exceptions we want to handle: the business logic exception InvalidArticleException,
        which has a @SoapFault annotation, and other exceptions, which don't have the annotation. Therefore, we
        have two exception resolvers here.
    -->

    <bean class="org.springframework.ws.soap.server.endpoint.SoapFaultAnnotationExceptionResolver">
        <description>
            This exception resolver maps exceptions with the @SoapFault annotation to SOAP Faults. The business logic
            exception InvalidArticleException has these.
        </description>
        <property name="order" value="1"/>
    </bean>

    <bean class="org.springframework.ws.soap.server.endpoint.SoapFaultMappingExceptionResolver">
        <description>
            This exception resolver maps other exceptions to SOAP Faults. Both UnmarshallingException and
            ValidationFailureException are mapped to a SOAP Fault with a "Client" fault code.
            All other exceptions are mapped to a "Server" error code, the default.
        </description>
        <property name="defaultFault" value="SERVER"/>
        <property name="exceptionMappings">
            <props>
                <prop key="org.springframework.oxm.UnmarshallingFailureException">CLIENT,Invalid request</prop>
                <prop key="org.springframework.oxm.ValidationFailureException">CLIENT,Invalid request</prop>
            </props>
        </property>
        <property name="order" value="2"/>
    </bean>
        	    
</beans>
